// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // Role: "user", "admin", "moderator"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  searchHistory SearchHistory[]
  bookmarks     Bookmark[]

  @@map("users")
}

// Account model for OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model for Auth.js
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Verification Token model for Auth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Search History model
model SearchHistory {
  id        String   @id @default(cuid())
  userId    String
  query     String   @db.Text
  language  String   @default("english") // hindi, english, hinglish
  response  Json?    // Store the AI response
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

// Bookmark model for saved verses/topics
model Bookmark {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?  @db.Text
  reference   String   // Bible reference (e.g., "John 3:16")
  text        String   @db.Text
  version     String   // Bible version (ESV, NIV, IBP)
  tags        String[] // Array of tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}

// Bible Version model for managing different Bible translations
model BibleVersion {
  id        Int      @id @default(autoincrement())
  code      String   @unique  // "ESV", "NIV", "KJV", etc.
  name      String            // "English Standard Version"
  language  String   @default("en")
  publisher String?
  year      Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verses BibleVerse[]

  @@map("bible_versions")
}

// Bible Verse model for storing all verses
model BibleVerse {
  id        BigInt      @id @default(autoincrement())
  versionId Int
  book      String
  chapter   Int
  verse     Int
  text      String      @db.Text
  createdAt DateTime    @default(now())

  version BibleVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([versionId, book, chapter, verse])
  @@index([book, chapter, verse])
  @@index([versionId, book, chapter])
  @@index([book])
  @@map("bible_verses")
}
