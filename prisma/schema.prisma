// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // Role: "user", "admin", "moderator"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  searchHistory SearchHistory[]
  bookmarks     Bookmark[]
  trainingData  TrainingData[]

  @@map("users")
}

// Account model for OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model for Auth.js
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Verification Token model for Auth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Search History model
model SearchHistory {
  id        String   @id @default(cuid())
  userId    String
  query     String   @db.Text
  language  String   @default("english") // hindi, english, hinglish
  response  Json?    // Store the AI response
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

// Bookmark model for saved verses/topics
model Bookmark {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?  @db.Text
  reference   String   // Bible reference (e.g., "John 3:16")
  text        String   @db.Text
  version     String   // Bible version (ESV, NIV, IBP)
  tags        String[] // Array of tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}

// Bible Version model for managing different Bible translations
model BibleVersion {
  id        Int      @id @default(autoincrement())
  code      String   @unique  // "ESV", "NIV", "KJV", etc.
  name      String            // "English Standard Version"
  language  String   @default("en")
  publisher String?
  year      Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verses BibleVerse[]

  @@map("bible_versions")
}

// Bible Verse model for storing all verses
model BibleVerse {
  id        BigInt      @id @default(autoincrement())
  versionId Int
  book      String
  chapter   Int
  verse     Int
  text      String      @db.Text
  createdAt DateTime    @default(now())

  version BibleVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([versionId, book, chapter, verse])
  @@index([book, chapter, verse])
  @@index([versionId, book, chapter])
  @@index([book])
  @@map("bible_verses")
}

// AI Training Data model for collecting user feedback and improving responses
model TrainingData {
  id                String      @id @default(cuid())
  query             String      @db.Text  // The user's question
  response          String      @db.Text  // The AI's response
  expectedResponse  String?     @db.Text  // What the correct response should be
  language          String                 // "english", "hindi", "hinglish"
  category          String?                // "theology", "prayer", "doctrine", "history", "interpretation", "practical"
  quality           String      @default("good") // "excellent", "good", "poor"
  userFeedback      String?                // "helpful", "not_helpful", "incorrect"
  customFeedback    String?     @db.Text  // User's custom feedback text
  userId            String?                // Optional user ID if logged in
  sessionId         String?                // Session identifier for anonymous users
  metadata          Json?                  // Additional metadata (context, verse references, etc.)
  isValidated       Boolean     @default(false) // Whether this data has been reviewed
  isUsedForTraining Boolean     @default(false) // Whether this data is used in training
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([language])
  @@index([category])
  @@index([quality])
  @@index([userFeedback])
  @@index([createdAt])
  @@map("training_data")
}

// Model Configuration for AI models
model ModelConfig {
  id                     String   @id @default(cuid())
  modelName             String   @unique      // "gemini-2.0-flash-001", "gpt-4", etc.
  provider              String                // "gemini", "openai", "claude", "local"
  apiKey                String?               // Encrypted API key
  basePrompt            String   @db.Text     // Base system prompt
  temperature           Float    @default(0.7)
  maxTokens             Int      @default(2048)
  systemInstructions    String   @db.Text     // System instructions
  englishPrompt         String   @db.Text     // English-specific prompt
  hindiPrompt           String   @db.Text     // Hindi-specific prompt
  hinglishPrompt        String   @db.Text     // Hinglish-specific prompt
  isActive              Boolean  @default(false)
  trainingDataCount     Int      @default(0)
  lastTrainedAt         DateTime?
  performanceMetrics    Json?                 // Store accuracy, consistency, etc.
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("model_configs")
}

// Performance Metrics tracking
model PerformanceMetric {
  id                  String   @id @default(cuid())
  modelConfigId       String
  accuracy            Float
  languageConsistency Float
  biblicalAccuracy    Float
  userSatisfaction    Float
  totalQueries        Int
  period              String   // "daily", "weekly", "monthly"
  date                DateTime
  createdAt           DateTime @default(now())

  @@unique([modelConfigId, period, date])
  @@index([date])
  @@map("performance_metrics")
}
